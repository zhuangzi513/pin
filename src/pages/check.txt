<template>
  <text class="title"> check </text>
  <view class="check_info_container">
      <view class="table">
          <view class="table-row">
              <view class="table-cell">" Category "</view>
              <picker mode="selector" range="{{ categoryRange }}" bindchange="onCategoryPickerChange"/>
                  <view class="picker">
                      category: {{ categoryRange[categoryIndex] }}
                  </view>
              </picker>
              <view class="table-cell">" Quality "</view>
              <picker mode="selector" range="{{ qualityRange }}" bindchange="onQualityPickerChange"/>
                  <view class="picker">
                      quality: {{ qualityRange[qualityIndex] }}
                  </view>
              </picker>
              <view class="table-cell">" Color "</view>
              <view class="table-cell">
                  <picker mode="selector" range="{{ colorRange }}" bindchange="onColorPickerChange"/>
                      <view class="picker">
                          color: {{ colorRange[colorIndex] }}
                      </view>
                  </picker>
              </view>
          </view>
          <view class="table-row">
              <view class="table-cell">" X "</view>
              <view class="table-cell">
                  <input type="text" model:value="item.value" bindinput="onSizeXInput"/>
              </view>
              <view class="table-cell">" Y "</view>
              <view class="table-cell">
                  <input type="text" model:value="item.value" bindinput="onSizeYInput"/>
              </view>
              <view class="table-cell">" Z "</view>
              <view class="table-cell">
                  <input type="text" model:value="item.value" bindinput="onSizeZInput"/>
              </view>
          </view>
          <view class="table-row">
              <view class="table-cell">" expect price "</view>
              <view class="table-cell">
                  <input type="text" model:value="item.value" bindinput="onPriceInput"/>
              </view>
          </view>
          <view class="table-row">
              <view class="weui-uploader__input-box">
                  <view class="weui-uploader__input" @tap="chooseImage"></view>
              </view>
          </view>

      </view>
      <view class="btn-box">
          <view class="button" @tap.stop="doCheck">do check now</view>
      </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/api/api'
  import { USER_SPECICAL_INFO, SEARCH_KEYWORDS } from '@/utils/constant'

  export default class Check extends wepy.page {
    config = {
      navigationBarTitleText: 'check file'
    }

    components = {
    }

    data = {
      openId : '',
      colorRange: [
          'green',
          'yellow',
          'pink'
      ],
      colorIndex: '',
      qualityRange: [
          'High',
          'normal',
          'low'
      ],
      qualityIndex: '',
      categoryRange: [
          'WSP',
          'DZ',
          'FG',
          'ED'
      ],
      categoryIndex: '',

      checkInfo : {
        categoryCode: 0,
        colorCode: 0,
        qualityCode: 0,
        size_X: 0,
        size_Y: 0,
        size_Z: 0
      },
      priceExpected : 0,
      priceMay : 0,
      uploadFiles:[]
    }

    methods = {
        onCategoryPickerChange(e) {
            this.checkInfo.categoryCode = e.value;
        }

        onColorPickerChange(e) {
            this.checkInfo.colorCode = e.value;
        }

        onQualityPickerChange(e) {
            this.checkInfo.qualityCode = e.value;
        }


        onSizeXInput(e) {
            this.checkInfo.size_X = e.value;
        }

        onSizeXInput(e) {
            this.checkInfo.size_Y = e.value;
        }

        onSizeZInput(e) {
            this.checkInfo.size_Z = e.value;
        }

        onPriceInput(e) {
            this.priceExpected = e.value;
        }

        async checkInfo(currentPage, size) {
          let that = this
          const json = await api.getGetLikeList({
            query: {
              page: currentPage || 1,
              size: size || 10,
              categoryCode: this.check_info.categoryCode || '',
              colorCode: this.check_info.colorCode || '',
              qualityCode: this.check_info.qualityCode || '',
              sizeXYZ: this.check_info.sizeXYZ || '',
              sort: this.sort,
            }
          })
          that.$apply()
        }

        async chooseImage (e) {
            let res = await wepy.chooseImage({
                sizeType: ['original', 'compressed'],
                sourceType: ['album', 'camera']
            });
            this.files = this.uploadFiles.concat(res.tempFilePaths);
            this.$apply();
        },

        previewImage (e) {
            wepy.previewImage({
                current: e.currentTarget.id,
                urls: this.data.uploadFiles
            });
        },

        search(val) {
            this.list = []
            this.isEmpty = false
            this.showLoading = true
            this.keyword = val
            this.searchGoods()
        },

        sortBy(e) {
            switch (e.name) {
                case 'general':
                  this.sort = -1
                  break
                case 'sale':
                  this.sort = 3
                  break
                case 'price':
                  this.sort = (e.type === 'desc') ? 2 : 1
                  break
                case 'sku':
                  this.skuval = e.type
                  break
            }

            this.goods = []
            this.showLoading = true
            this.showHistory = false
            this.isEmpty = false
            this.searchGoods()
        }
    }

    onLoad(option) {
        let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {}
        this.openId = userSpecialInfo.openid
        if (this.categoryCode !== undefined && this.categoryCode.length > 0) {
        }
    }

    onReachBottom() {
    }
  }
</script>

<style lang="less">
  .title {
  }

  .btn-box {
    width: 377rpx;
    margin: 0 auto;
    padding-top: 88rpx;

    .button {
      color: #999;
    }
  }

  .table {
    display: table;
    width: 100%;
  }
  .table-row {
    display: table-row;
  }
  .table-cell {
    display: table-cell;
    border: 1px solid #ccc;
    padding: 8px;
  }
  .picker {
    padding: 10px;
    background-color: #f8f8f8;
    border: 1px solid #eee;
  }
</style>
